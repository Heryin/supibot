module.exports = {
	Name: "doesnotexist",
	Aliases: ["dne"],
	Author: "supinic",
	Cooldown: 15000,
	Description: "Posts a random picture from the site thispersondoesnotexist.com, and its variants (artwork, cat, horse, person). These pictures are not real, they have been generated by an AI.",
	Flags: ["link-only","mention","non-nullable","pipe"],
	Params: null,
	Whitelist_Response: null,
	Static_Data: (() => ({
	        buildURL: (type) => {
	            if (type === "person") {
	                return `https://this${type}doesnotexist.com/image`;
	            }
	            else {
	                return `https://this${type}doesnotexist.com`;
	            }
	        },
	        types: ["artwork", "cat", "horse", "person"]
	    })),
	Code: (async function doesnotexist (context, type) {
	        const { buildURL, types } = this.staticData;
	        if (!type) {
	            type = "person";
	        }
	
	        type = type.toLowerCase();
	        if (!types.includes(type)) {
	            return {
	                success: false,
	                reply: `Invalid type provided! Use one of: ${types.join(", ")}`
	            };
	        }
	
	        const imageData = await sb.Got({
	            url: buildURL(type),
	            responseType: "buffer",
	            throwHttpErrors: false
	        });
	
	        if (imageData.statusCode !== 200) {
	            console.warn("dne download failed", imageData);
	            return {
	                success: false,
	                reply: `Fetching image data failed monkaS`
	            };
	        }

	        const { statusCode, link } = await sb.Utils.uploadToNuuls(imageData.rawBody ?? imageData.body);
	        if (statusCode !== 200) {
	            return {
	                success: false,
	                reply: `Could not upload the image to nuuls.com! Error: ${statusCode}`
	            };
	        }
	
	        return {
	            link,
	            reply: `This ${type} does not exist: ${link}`
	        };
	    }),
	Dynamic_Description: (async (prefix, values) => {
	        const { buildURL, types } = values.getStaticData();
	        const list = types.map(i => `<li><code>${i}</code> - <a href="${buildURL(i)}">This ${i} does not exist</a></li>`).join("");
	
	        return [
	            `Posts a random picture from the set of "this X does not exist" websites.`,
	            "",
	
	            `<code>${prefix}dne</code>`,
	            "Posts a random person that does not exist",
	            "",
	
	            `<code>${prefix}dne (type)</code>`,
	            "Posts a random (type) that does not exist",
	            "",
	
	            "Available types:",
	            `<ul>${list}</ul>`
	        ];
	    })
};