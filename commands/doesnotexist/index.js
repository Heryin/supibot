module.exports = {
    Name: "doesnotexist",
    Aliases: ["dne"],
    Author: "supinic",
    Cooldown: 15000,
    Description: "Posts a random picture from the site thispersondoesnotexist.com, and its variants. These pictures are not real, they have been generated by an AI.",
    Flags: ["link-only","mention","non-nullable","pipe"],
    Whitelist_Response: null,
    Static_Data: (() => ({
        buildURL: (type) => {
            if (type === "person") {
                return `https://this${type}doesnotexist.com/image`;
            }
            else {
                return `https://this${type}doesnotexist.com`;
            }
        },
        types: ["artwork", "cat", "horse", "person"]
    })),
    Code: (async function doesnotexist (context, type) {
        const { buildURL, types } = this.staticData;
        if (!type) {
            type = "person";
        }

        type = type.toLowerCase();
        if (!types.includes(type)) {
            return {
                success: false,
                reply: `Invalid type provided! Use one of: ${types.join(",")}`
            };
        }

        const form = new sb.Got.FormData();
        form.append("image", buildURL(type));

        const { body: uploadData } = await sb.Got("GenericAPI", {
            method: "POST",
            responseType: "json",
            url: "https://api.imgur.com/3/image",
            headers: {
                ...form.getHeaders(),
                Authorization: "Client-ID " + sb.Config.get("IMGUR_PUBLIC_CLIENT_ID")
            },
            body: form.getBuffer(),
            retry: 0,
            timeout: 10000
        });

        const link = `https://i.imgur.com/${uploadData.data.id}.jpg`;
        return {
            link,
            reply: `This ${type} does not exist: ${link}`
        };
    }),
    Dynamic_Description: null
};