module.exports = {
    Name: "doesnotexist",
    Aliases: ["dne"],
    Author: "supinic",
    Cooldown: 15000,
    Description: "Posts a random picture from the site thispersondoesnotexist.com, and its variants (artwork, cat, horse, person). These pictures are not real, they have been generated by an AI.",
    Flags: ["link-only","mention","non-nullable","pipe"],
    Whitelist_Response: null,
    Static_Data: (() => ({
        buildURL: (type) => {
            if (type === "person") {
                return `https://this${type}doesnotexist.com/image`;
            }
            else {
                return `https://this${type}doesnotexist.com`;
            }
        },
        types: ["artwork", "cat", "horse", "person"]
    })),
    Code: (async function doesnotexist (context, type) {
        const { buildURL, types } = this.staticData;
        if (!type) {
            type = "person";
        }

        type = type.toLowerCase();
        if (!types.includes(type)) {
            return {
                success: false,
                reply: `Invalid type provided! Use one of: ${types.join(", ")}`
            };
        }

        const imageData = await sb.Got({
            url: buildURL(type),
            responseType: "buffer"
        });

        const form = new sb.Got.FormData();
        form.append("attachment", imageData.rawBody ?? imageData.body, "file.jpg");

        const uploadData = await sb.Got({
            method: "POST",
            throwHttpErrors: false,
            url: "https://i.nuuls.com/upload",
            headers: {
                ...form.getHeaders()
            },
            body: form.getBuffer(),
            retry: 0,
            timeout: 10000
        });

        if (uploadData.statusCode !== 200) {
            console.warn("dne upload failed", uploadData);
            return {
                success: false,
                reply: `Upload to nuuls.com failed monkaS error log is in the console`
            };
        }

        return {
            link: uploadData.body,
            reply: `This ${type} does not exist: ${uploadData.body}`
        };
    }),
    Dynamic_Description: (async (prefix, values) => {
        const { buildURL, types } = values.getStaticData();
        const list = types.map(i => `<li><a href="${buildURL(i)}">This ${i} does not exist</a></li>`).join("");

        return [
            `Posts a random picture from the set of "this X does not exist" websites.`,
            "",

            `<code>${prefix}dne</code>`,
            "Posts a random person that does not exist",
            "",

            `<code>${prefix}dne (type)</code>`,
            "Posts a random (type) that does not exist",
            "",

            "Available types:",
            `<ul>${list}</ul>`
        ];
    })
};